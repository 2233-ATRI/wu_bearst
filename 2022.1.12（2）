#include <stdio.h>//实现字符串缓冲区类 strbuf 扩容，(追加|插入)字符，字符串等操作。
#include <stdlib.h>
#include <string.h>

struct strbuf {
  int len;     //当前缓冲区（字符串）长度
  int alloc;   //当前缓冲区（字符串）容量
  char *buf;   //缓冲区（字符串）
};
void strbuf_grow(struct strbuf *sb, size_t extra)//将 sb 的长度扩大 extra。
void strbuf_add(struct strbuf *sb, const void *data, size_t len)//向 sb 追加长度为 len 的数据 data。
void strbuf_addch(struct strbuf *sb, int c)//向 sb 追加一个字符 c。
void strbuf_addstr(struct strbuf *sb, const char *s)	//向 sb 追加一个字符串 s。
void strbuf_addbuf(struct strbuf *sb, const struct strbuf *sb2);//向一个 sb 追加另一个 strbuf的数据。
static inline void strbuf_setlen(struct strbuf *sb, size_t len)//设置 sb 的长度 len。
static inline size_t strbuf_avail(const struct strbuf *sb)//计算 sb 目前仍可以向后追加的字符串长度。
void strbuf_insert(struct strbuf *sb, size_t pos, const void *data, size_t len)//向 sb 内存坐标为 pos 位置插入长度为 len 的数据 data。

void strbuf_grow(struct strbuf *sb, size_t extra)//将 sb 的长度扩大 extra。
{
  sb->alloc=extra;
  sb->buf=(char*)malloc(sizeof(char)*extra); 
}

void strbuf_add(struct strbuf *sb, const void *data, size_t len)//向 sb 追加长度为 len 的数据 data。
{
  while(sb->len>data+sb->alloc){
    sb->alloc=2*sb->alloc;
    sb->buf=(char *)realloc(sb->suf,sizeof(char)*(sb->alloc)*2);

  }
  sb->len=len+sb->len;
  strcat(sb->buf,data);
}
void strbuf_addch(struct strbuf *sb, int c)//向 sb 追加一个字符 c。
{
  sb->buf=(char*)realloc(sb->buf,sizeof(char)*(sb->alloc)+4);
  strcat(sb->buf,c);
}
void strbuf_addstr(struct strbuf *sb, const char *s)	//向 sb 追加一个字符串 s。
{
  while(sb->len+strlen(s)>sb->alloc){
        sb->alloc=2*sb->alloc;
        sb->buf=(char*)realloc(sb->buf,sizeof(char)*(sb->alloc)*2);
    }
    strcat(sb->buf,s);
}
void strbuf_addbuf(struct strbuf *sb, const struct strbuf *sb2);//向一个 sb 追加另一个 strbuf的数据。
{
  sb->len=sb->len+
}

static inline void strbuf_setlen(struct strbuf *sb, size_t len)//设置 sb 的长度 len。
{
  sb->len=sizeof(len);
}
static inline size_t strbuf_avail(const struct strbuf *sb)//计算 sb 目前仍可以向后追加的字符串长度。
{
  int qw=0;
  qw=sizeof(sb->alloc)-sizeof(sb->len);
  printf("%d",qw);

}
void strbuf_insert(struct strbuf *sb, size_t pos, const void *data, size_t len)//向 sb 内存坐标为 pos 位置插入长度为 len 的数据 data。
{
    for(int i=pos;pos<sb->len;i++){
      
    }
}/*
for( i=cnu;i>=pos;i--)
pBase[i]=pBase[i-1];
*/
int main()
{
    struct strbuf sb;
    struct strbuf az;
    int len;
    strbuf_grow(&az,10);
    strbuf_add(&az,"xiyou",5);
    strbuf_addch(&sb,1);
    strbuf_addstr(&sb,"linux");
    strbuf_addbuf(&az,&sb);
    char*ac=strbuf_detach(&az,&len);
    printf("ac=%s\n",az.buf);
    printf("len=%d\n",len);
    printf("cmp=%d\n",strbuf_cmp(&az,&sb));
    printf("az=%s",az.buf);
    return 0;
}
